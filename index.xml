<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hllu&#39;s blog</title>
    <link>https://hllu.github.io/</link>
    <description>Recent content on hllu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 31 May 2023 17:35:29 +0800</lastBuildDate><atom:link href="https://hllu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git blame使用</title>
      <link>https://hllu.github.io/posts/git-blame%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 31 May 2023 17:35:29 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/git-blame%E4%BD%BF%E7%94%A8/</guid>
      <description>git blame 排查问题的时候，为了查找是谁改得某个文件或者某一行，可以用git blame这 个命令，用法最常用的就是 git blame &amp;lt;filename&amp;gt; git blame -L start,end &amp;lt;filename&amp;gt; 或者 git blame myfile.py git blame -L 5,20 myfile.py //查看5-20行的修改历史 git blame -L 5,+20 myfile.py //表示查看5行及后面</description>
    </item>
    
    <item>
      <title>emacs在org模式使用plantuml</title>
      <link>https://hllu.github.io/posts/emacs%E5%9C%A8org%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8plantuml/</link>
      <pubDate>Tue, 30 May 2023 17:35:20 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/emacs%E5%9C%A8org%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8plantuml/</guid>
      <description>emacs在org模式画图 org模式画简单的图，可以用ditaa这种工具，小巧够用，可以满足大部分的需求。 配合emacs的picture-mode和artis-mode，可以实现文本画大部分的图。生成</description>
    </item>
    
    <item>
      <title>my emacs config</title>
      <link>https://hllu.github.io/posts/emacsconfig/</link>
      <pubDate>Mon, 29 May 2023 11:30:37 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/emacsconfig/</guid>
      <description>my .config ;; Added by Package.el. This must come before configurations of ;; installed packages. Don&#39;t delete this line. If you don&#39;t want it, ;; just comment it out by adding a semicolon to the start of the line. ;; You may delete these explanatory comments. ;; C-x C-+会增加字体大小 ;; C-+ 或 C-- 会增加/缩小字体大小 ;; C-x C-0会恢复字体大小 ;;================org======================== ;;-------------------org----------------- ;; #+ATTR_ORG: :width 100 ~ ;; #+ATTR_HTML: :width 100 ~ ;; C-c C-q 为</description>
    </item>
    
    <item>
      <title>use ditaa in emacs</title>
      <link>https://hllu.github.io/posts/use-ditaa-in-emacs/</link>
      <pubDate>Fri, 26 May 2023 11:01:08 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/use-ditaa-in-emacs/</guid>
      <description>ditaa ditaa 是 DIagrams Through Ascii Art，作者是 Stathis Sideris。是一 种基于java的类似plantuml但是更轻量级的绘图工具。ditaa使用符号| - + / &amp;gt; &amp;lt; V ^符号渲染不同的字符画出来，在文本格式下，字符画本身方便存储</description>
    </item>
    
    <item>
      <title>VPC内互通问题排查</title>
      <link>https://hllu.github.io/posts/vpc%E5%86%85%E4%BA%92%E9%80%9A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Mon, 22 May 2023 15:37:28 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/vpc%E5%86%85%E4%BA%92%E9%80%9A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid>
      <description>问题 VPC内虚机通过NAT网关配置SNAT访问外网。如下所示： 使用中出现问题，虚机不能访问外网。 基础知识 DVR模式 按照 Neutron 原先的设计，所有网络服务都在网络节点上进行，这意味着大量 的流量和处理，给网络节点</description>
    </item>
    
    <item>
      <title>iptables-in-neutron</title>
      <link>https://hllu.github.io/posts/iptables-in-neutron/</link>
      <pubDate>Mon, 22 May 2023 15:26:22 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/iptables-in-neutron/</guid>
      <description>iptables Iptables 很早就已经集成到了Linux 的内核中，它由转发表 和 规则链 组成，通过表和链的组合，能适应各种场景下的安全需求功能。 iprable默认包含了表，每个表都有不同的用途，比如 Filter 表用来过滤数据 包，发往主机内</description>
    </item>
    
    <item>
      <title>abbrev和skeleton使用</title>
      <link>https://hllu.github.io/posts/usingabbrev/</link>
      <pubDate>Wed, 17 May 2023 17:45:10 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/usingabbrev/</guid>
      <description>abbrew abbrev 是 abbreviation 的缩写。这个模块的主要功能也是定义宏，并在文档 中把宏展开。总的来说，abbrev 提供了缩写展开功能，对于输入频次比较高的 文本可以减少输入工作。 abbrew 定义 abbrev 的定义使用 C-x a 作为快捷键前缀，或者说凡是和</description>
    </item>
    
    <item>
      <title>在emacs使用org和beamer做演讲稿</title>
      <link>https://hllu.github.io/posts/beamer/</link>
      <pubDate>Fri, 12 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hllu.github.io/posts/beamer/</guid>
      <description>Beamer 介绍 Beamer是一个生成演示稿的 LaTeX 环境. 它包括了以下特性： 在演示稿中自动生成结构化的元素（例如 Marburg 主题)。 在演示稿中，这个特性可以为观众提供了视觉参考。 对组织演示稿有很大的帮助。 主题 完全支持 LaTeX 优点 在</description>
    </item>
    
    <item>
      <title>Web 高并发压测工具WRK, AB介绍</title>
      <link>https://hllu.github.io/posts/web-%E9%AB%98%E5%B9%B6%E5%8F%91%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7wrk-ab%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 06 May 2023 15:21:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/web-%E9%AB%98%E5%B9%B6%E5%8F%91%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7wrk-ab%E4%BB%8B%E7%BB%8D/</guid>
      <description>常见压力测试工具有: ab, wrk，locust等。此外，还有 GoReplay 和 TcpCopy 等，可以拷贝线上服务器的真实流量并转发到测试服务器上去，用真实流量来测试，如此得到的数据更可信。不过它们的用法更复杂。 ab ab(Apache</description>
    </item>
    
    <item>
      <title>Blueprint</title>
      <link>https://hllu.github.io/posts/bluprint/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hllu.github.io/posts/bluprint/</guid>
      <description>简介 在osgi中服务的使用有多种方式，如使用传统的注册式服务，就是我们之前中example不断使用的使用方式，还是osgi中的声明式服务， 还有著名的ipojo等等，但在这里值得花一番笔墨来讲解的应该是</description>
    </item>
    
    <item>
      <title>Git review安装使用说明</title>
      <link>https://hllu.github.io/posts/gitreview/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hllu.github.io/posts/gitreview/</guid>
      <description>安装 git安装略过 安装git-review [root@master ~]# yum install git-review Loaded plugins: fastestmirror, langpacks Loading mirror speeds from cached hostfile epel: mirrors.aliyun.com Resolving Dependencies &amp;ndash;&amp;gt; Running transaction check &amp;mdash;&amp;gt; Package git-review.noarch 0:1.24-5.el7 will be installed &amp;ndash;&amp;gt; Finished Dependency Resolution Dependencies Resolved =============================================================================================================================================================================================== Package Arch Version Repository Size =============================================================================================================================================================================================== Installing: git-review noarch 1.24-5.el7 epel 57 k Transaction Summary =============================================================================================================================================================================================== Install 1 Package 安装gitweb 1）# yum install gitweb 2）修改git.c</description>
    </item>
    
    <item>
      <title>OpenStack基础</title>
      <link>https://hllu.github.io/posts/openstack/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hllu.github.io/posts/openstack/</guid>
      <description>WSGI(Web Server Gateway Interface) WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello, web!”： def application(environ, start_response): start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)]) return [b&#39;&amp;lt;h1&amp;gt;Hello, web!&amp;lt;/h1&amp;gt;&#39;] 上面的application(</description>
    </item>
    
    <item>
      <title>OVS 常用命令</title>
      <link>https://hllu.github.io/posts/ovs/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hllu.github.io/posts/ovs/</guid>
      <description>如何添加OVS和PORT; ovs-vsctl add-br br0 ovs-vsctl del-br br0 ovs-vsctl list-br ovs-vsctl add-port br0 eth0 ovs-vsctl set port eth0 tag=1//vlan id ovs-vsctl del-port br0 eth0 ovs-vsctl list-ports br0 ovs-vsctl show //显示所有端口的vlan属性 如何配置QOS，比如队列和限速; sudo ovs-vsctl -- set Port eth2 qos=@newqos -- --id=@newqos create QoS type=linux-htb other-config:max-rate=1000000000 queues=0=@q0,1=@q1 -- --id=@q0 create Queue dscp =1 other-config:min-rate=100000000 other-config:max-rate=100000000 -- --id=@q1 create Queue other-config:min-rate=500000000 ovs-vsctl clear</description>
    </item>
    
    <item>
      <title>org mode中插入和使用图片</title>
      <link>https://hllu.github.io/posts/org-mode%E4%B8%AD%E6%8F%92%E5%85%A5%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87/</link>
      <pubDate>Tue, 25 Apr 2023 15:08:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/org-mode%E4%B8%AD%E6%8F%92%E5%85%A5%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87/</guid>
      <description>orgmode有各种各样的好处，主要是文本折叠和缩进的功能实在太好用，gtd也功 能很强大。无论是用于hugo编辑工具还是作为笔记的主力，都是很好的实践。 但有一个问题，是emacs和org的弱项-图片处</description>
    </item>
    
    <item>
      <title>send a post using chrome consol</title>
      <link>https://hllu.github.io/posts/send-a-post-using-chrome-consol/</link>
      <pubDate>Thu, 20 Apr 2023 15:10:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/send-a-post-using-chrome-consol/</guid>
      <description>send a message like this fetch(&#39;https://abb-king.cloud.cn:8080/service/cart/add&#39;, { method: &#39;POST&#39;, body: JSON.stringify({&amp;quot;useUnitId&amp;quot;:&amp;quot;000000000000000200,424242020198576128&amp;quot;,&amp;quot;setCount&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;billType&amp;quot;:&amp;quot;dailySettlement&amp;quot;,&amp;quot;orderType&amp;quot;:&amp;quot;new&amp;quot;,&amp;quot;durationUnit&amp;quot;:&amp;quot;D&amp;quot;,&amp;quot;productTypeCode&amp;quot;:&amp;quot;IPv6_UL&amp;quot;,&amp;quot;consoleCustomization&amp;quot;:{},&amp;quot;productList&amp;quot;:[{&amp;quot;region&amp;quot;:&amp;quot;region-kunming-hlw&amp;quot;,&amp;quot;availableZone&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;productLineCode&amp;quot;:&amp;quot;EIP&amp;quot;,&amp;quot;productTypeCode&amp;quot;:&amp;quot;IPv6_UL&amp;quot;,&amp;quot;productLineName&amp;quot;:&amp;quot;ip&amp;quot;,&amp;quot;instanceCount&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;instanceId&amp;quot;:&amp;quot;ada3bafe-590b-45d7-a18f&amp;quot;,&amp;quot;instanceName&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;itemList&amp;quot;:[{&amp;quot;code&amp;quot;:&amp;quot;instance&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;billingItem&amp;quot;,&amp;quot;unit&amp;quot;:&amp;quot;COUNT&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;packageList&amp;quot;:null}]}],&amp;quot;recordOrder&amp;quot;:1}), headers: { &#39;Content-type&#39;: &#39;application/json; charset=UTF-8&#39;,&#39;Authorization&#39;: &#39;bearer eyOiJSUzI1NiIs&#39; } }) .then(res =&amp;gt; res.json()) .then(console.log) ipv6 curl curl -6 -g --interface eth0 &amp;quot;http://[e80::f85b:4256:ee76:24a4]:8080&amp;quot; -vvv put curl -X PUT -H &#39;Content-Type: application/json&#39; -H &#39;region: ly-dx-zx&#39; -H &#39;Authorization:bearer token&#39; -d &#39;{&amp;quot;eip&amp;quot;: {&amp;quot;serverId&amp;quot;:&amp;quot;48e95b16--9fff-9cda5f443b25&amp;quot;,&amp;quot;portId&amp;quot;:&amp;quot;c97a826a--ceb373aad4d5&amp;quot;,&amp;quot;fixedIp&amp;quot;:&amp;quot;172.16.1.17&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;11&amp;quot;,&amp;quot;availabilityZone&amp;quot;:&amp;quot;ab.cd.ed&amp;quot;}}&#39; http://100.105.50.1:8080/ecp/v1.1/esp/-4b95-954e-371ea947a0f0/action/bind</description>
    </item>
    
    <item>
      <title>使用qemu-nbd编辑qcow2镜像</title>
      <link>https://hllu.github.io/posts/%E4%BD%BF%E7%94%A8qemu-nbd%E7%BC%96%E8%BE%91qcow2%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 20 Apr 2023 10:30:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/%E4%BD%BF%E7%94%A8qemu-nbd%E7%BC%96%E8%BE%91qcow2%E9%95%9C%E5%83%8F/</guid>
      <description>qemu-nbd NBD指的是Network Block Device，正如其名字的意思，NBD让用户可以通过网络访问到某个块设备，或者设备镜像。 NFS的方式只能管到文件系统层，而NBD的方式则不仅可以管到文件系统层，还可以管到</description>
    </item>
    
    <item>
      <title>magit manue</title>
      <link>https://hllu.github.io/posts/magit-manue/</link>
      <pubDate>Wed, 15 Jun 2022 15:19:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/magit-manue/</guid>
      <description>简介 magit 是emacs下对git 的封装,让你基本在emacs中即可完成对git仓库的管理,需要单独安装 帮助 可以在magit status 中 ? 键可提示magit命令绑定在哪些按键上 magit-status因为常用，可以</description>
    </item>
    
    <item>
      <title>iptables</title>
      <link>https://hllu.github.io/posts/iptables/</link>
      <pubDate>Fri, 11 Feb 2022 10:30:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/iptables/</guid>
      <description>过滤规则 连接数限制 tcp 在转发forward链的时候,TCP连接数量大于80 就丢弃, 针对所有IP $ iptables -I FORWARD -p tcp -m connlimit --connlimit-above 80 -j DROP udp UDP无法控制连接数, 只能控制每秒多少个UDP包, 一般设置为每秒3~5个比较合理.</description>
    </item>
    
    <item>
      <title>use yasnippet</title>
      <link>https://hllu.github.io/posts/use-yasnippet/</link>
      <pubDate>Sat, 09 Oct 2021 15:32:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/use-yasnippet/</guid>
      <description>介绍 yasnippet是emacs下一套高效的模版(代码块)系統，它允许自定义模版内容并通过tab自动展示，省去了很多重复编写复杂代码块的时间，提高了开发的效率。 官方描述 YASnippet is a template system for Emacs. It allows you to type an abbreviation and</description>
    </item>
    
    <item>
      <title>使用org和ssh实现对ssh连接的管理</title>
      <link>https://hllu.github.io/posts/%E4%BD%BF%E7%94%A8org%E5%92%8Cssh%E5%AE%9E%E7%8E%B0%E5%AF%B9ssh%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 24 Sep 2021 17:26:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/%E4%BD%BF%E7%94%A8org%E5%92%8Cssh%E5%AE%9E%E7%8E%B0%E5%AF%B9ssh%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%AE%A1%E7%90%86/</guid>
      <description>emacs中，要打开一个ssh连接，可以用以下命令: /ssh name@10.110.20.18:~ 当输入密码的时候，emacs可以自动保存密码，方便以后输入。但这个连接的信 息无法与xshell等软件一样保存起来，下次输入的时候，还需要丛别的地</description>
    </item>
    
    <item>
      <title>emacs使用介绍</title>
      <link>https://hllu.github.io/posts/emacs/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/emacs/</guid>
      <description>这篇文章记录平时使用emacs的一些技巧和插件，基本的操作可以参考emacs自带 的教程TUTORIAL。emacs 自带的教程有英文版和繁体中文版，在emacs 中按下 Ctrl-h t 或者F1 t即可打开自带的此文档 基</description>
    </item>
    
    <item>
      <title>图片显示测试</title>
      <link>https://hllu.github.io/posts/picture/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/picture/</guid>
      <description>图片测试-尺寸控制 指定像素显示 图片测试-按比例显示-left Neural network representationFigure 1: pic left 图片测试-按比例显示 Neural network representationFigure 2: pic align right 图片测试-按比例显示-central pp representationFigure 3: pic centre 图片测试-原始尺寸 图片显示 在包含图片的org文件</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://hllu.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://hllu.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.
Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.</description>
    </item>
    
    <item>
      <title>Org-mode&amp;Hugo&amp;ox-hugo写Blog</title>
      <link>https://hllu.github.io/posts/demo/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://hllu.github.io/posts/demo/</guid>
      <description>通过emacs的org-mode写文章 在Org mode下写Blog，有两种方式 直接在Blog所在的目录下写独立的org 在目录‘~/blog/gitblog/orgcontent/’下添加个demon.</description>
    </item>
    
  </channel>
</rss>
